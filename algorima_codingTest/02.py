'''
Two dots 게임이란 두 개 이상의 점을 연결하여 연결된 점들을 없애는 게임입니다.
연결하는 방식은 같은 색깔의 점만 연결할 수 있고,
상하좌우로 이동하며 연결할 수 있습니다.
점은 4가지 색이 있으며, 각각 1, 2, 3, 4로 표시됩니다.

예를 들어, 게임 화면이

image

로 주어질 때,

(행:3, 열:1)에서 시작하여 연결하면 다음과 같이 두 가지 방식으로 연결할 수 있습니다.
554_1.png

(행:3, 열:4)에서 시작하여 연결하면 다음과 같이 두 가지 방식으로 연결할 수 있습니다.
554_2.png

이처럼, 어느 지점을 선택하여, 어느 방향으로 점들을 연결하느냐에 따라서
연결되는 점들의 개수가 다릅니다.
이때, 우리는 점들을 가장 길게 연결할 수 있는 경우를 찾으려고 합니다.
위의 예시의 경우 (행: 3, 열:4)에서 시작하여 7칸을 연결하는 경우가
가장 길게 연결할 수 있는 경우입니다.

게임 화면 board가 매개변수로 주어졌을 때,
점들을 가장 길게 연결할 수 있는 경우를 찾고,
연결된 점의 개수를 return 하도록 solution 함수를 완성해 주세요.
위의 예시에서는 7을 return 하면 됩니다.

단, 다음과 같이 어느 곳에서도 두 개 이상의 점을 연결하지 못하는 경우에는
-1을 return 해주세요.
제한사항
게임 화면 board는 2차원 배열로 주어지며, 1,2,3,4 로만 이루어져 있습니다.
게임 화면 board의 가로, 세로 길이 : 가로와 세로의 길이는 4입니다.
'''

'''
1. 우선 2차원 배열에 숫자가 들어가 있다.
2. 2차원 배열의 각 value를 추출할 수 있다.
==== 여기까지는 board 값으로 주어진다. ==== 
3. 같은 값을 가진 각 칸의 인덱스를 추출할 수 있다.
3-2. 값은 1,2,3,4 이 네개의 숫자로만 구성되어 있다. 
4. 각 칸의 인덱스의 x 또는 y 항의 값에서 1 씩 더하거나 뺐을 때,
    기존의 같은 value 값을 가진 칸이 있으면 하나의 연결 리스트에 추가한다. 
5. 이 연결 리스트의 길이가 제일 긴 것의 길이값을 반환한다.
'''
import numpy as np
def solution(board):
    answer = -1
    val = [1,2,3,4]
    answerDict = {}
    answerList = []
    for a in range(val.__len__()):
       # ex f(2, [[3,2,3,2], [2,1,1,2], [1,1,2,1], [4,1,1,1]]) 숫자 2를 이용해서 최장 연결 고리를 만들어보겠다.
       answerDict[a] = f(a+1, board)
       answerList.append(answerDict[a])

    answer = max(answerList)

    return answer

def f(num, matrix): #f(2, [[3,2,3,2], [2,1,1,2], [1,1,2,1], [4,1,1,1]])
    x = np.array(matrix)
    for a in range(len(matrix)):
        for b in range(len(matrix[a])):
            print(type(matrix[a][b]))
            if matrix[a][b] == num:
                np.where(matrix[a][b])[0]

                ....
            else:
                print("False")




print(solution([[3,2,3,2], [2,1,1,2], [1,1,2,1], [4,1,1,1]])) #7
# print(solution([[4,2,3,2], [2,1,2,4], [1,2,3,1], [4,1,4,3]])) #-1